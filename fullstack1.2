// App.jsx
import React from "react";
import { createRoot } from "react-dom/client";
import { Provider, useDispatch, useSelector } from "react-redux";
import { configureStore, createSlice } from "@reduxjs/toolkit";

// ---------- Redux Slice ----------
const cartSlice = createSlice({
  name: "cart",
  initialState: {
    items: []
  },
  reducers: {
    addToCart: (state, action) => {
      const item = action.payload;
      const existing = state.items.find((i) => i.id === item.id);
      if (existing) {
        existing.quantity += 1;
      } else {
        state.items.push({ ...item, quantity: 1 });
      }
    },
    removeFromCart: (state, action) => {
      state.items = state.items.filter((i) => i.id !== action.payload);
    },
    updateQuantity: (state, action) => {
      const { id, quantity } = action.payload;
      const item = state.items.find((i) => i.id === id);
      if (item && quantity > 0) {
        item.quantity = quantity;
      }
    },
    clearCart: (state) => {
      state.items = [];
    }
  }
});

const { addToCart, removeFromCart, updateQuantity, clearCart } =
  cartSlice.actions;

// ---------- Redux Store ----------
const store = configureStore({
  reducer: {
    cart: cartSlice.reducer
  }
});

// ---------- Product Component ----------
const products = [
  { id: 1, name: "Laptop", price: 800 },
  { id: 2, name: "Headphones", price: 100 },
  { id: 3, name: "Keyboard", price: 60 },
  { id: 4, name: "Mouse", price: 40 }
];

function ProductList() {
  const dispatch = useDispatch();
  return (
    <div className="products">
      <h2>üõçÔ∏è Products</h2>
      {products.map((p) => (
        <div key={p.id} className="product">
          <span>{p.name}</span>
          <span>${p.price}</span>
          <button onClick={() => dispatch(addToCart(p))}>Add to Cart</button>
        </div>
      ))}
    </div>
  );
}

// ---------- Cart Component ----------
function Cart() {
  const { items } = useSelector((state) => state.cart);
  const dispatch = useDispatch();

  const total = items.reduce((sum, i) => sum + i.price * i.quantity, 0);

  return (
    <div className="cart">
      <h2>üõí Shopping Cart</h2>
      {items.length === 0 ? (
        <p>No items in cart</p>
      ) : (
        <>
          {items.map((i) => (
            <div key={i.id} className="cart-item">
              <span>{i.name}</span>
              <span>${i.price}</span>
              <input
                type="number"
                value={i.quantity}
                min="1"
                onChange={(e) =>
                  dispatch(
                    updateQuantity({ id: i.id, quantity: Number(e.target.value) })
                  )
                }
              />
              <button onClick={() => dispatch(removeFromCart(i.id))}>
                Remove
              </button>
            </div>
          ))}
          <h3>Total: ${total}</h3>
          <button onClick={() => dispatch(clearCart())}>Clear Cart</button>
        </>
      )}
    </div>
  );
}

// ---------- Main App ----------
function App() {
  return (
    <div style={{ padding: "20px", fontFamily: "Arial" }}>
      <h1>üß© Redux Toolkit Shopping Cart</h1>
      <div style={{ display: "flex", gap: "50px" }}>
        <ProductList />
        <Cart />
      </div>
    </div>
  );
}

// ---------- Render ----------
const root = createRoot(document.getElementById("root"));
root.render(
  <Provider store={store}>
    <App />
  </Provider>
);
